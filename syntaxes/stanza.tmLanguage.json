{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "L.B. Stanza",
	"scopeName": "source.stanza",
	"patterns": [
		{
			"match": ";.*",
			"name": "comment.line.stanza"
		},
		{
			"match": "^[ \t]*(#define|#if-defined|#if-not-defined|#else)",
			"name": "meta.keyword.compile_time_flags.stanza"
		},
		{	"name": "meta.declaration.package.stanza",
			"begin": "defpackage",
            "beginCaptures": {
                "0": { "name": "storage.type.package.stanza" }
            },
            "end": "\\s*$|:|(?=;)",
            "endCaptures": {
                "0": { "name": "keyword.operator.colon.stanza" }
            },
            "patterns": [
                {
                    "match": "[^ \"'\t0-9~!@#$%^*+-=/.:&|<>][^ \t,.:&|<>\\[\\]{}()]*",
                    "name": "entity.name.function.package.stanza"
                },
                {
                    "begin": "(<:)",
                    "beginCaptures": {
                        "0": { "name": "keyword.operator.parent.stanza" }
                    },
                    "end": "(?=\\s*$)|(?=[:;])",
                    "contentName": "entity.other.inherited-class.stanza",
                    "patterns": [
                        {
                            "match": "&",
                            "name": "keyword.operator.intersection.stanza"
                        }
                    ]
                }
            ]
        },
        {	"name": "meta.declaration.type.stanza",
			"begin": "(?<!\\$)(?:defstruct|deftype)",
            "beginCaptures": {
                "0": { "name": "storage.type.type.stanza" }
            },
            "end": "\\s*$|:|(?=;)",
            "endCaptures": {
                "0": { "name": "keyword.operator.colon.stanza" }
            },
            "patterns": [
                {
                    "match": "[^ \"'\t0-9~!@#$%^*+-=/.:&|<>][^ \t,.:&|<>\\[\\]{}()]*",
                    "name": "entity.name.type.stanza"
                },
                {
                    "begin": "(<:)",
                    "beginCaptures": {
                        "0": { "name": "keyword.operator.parent.stanza" }
                    },
                    "end": "(?=\\s*$)|(?=[:;])",
                    "contentName": "entity.other.inherited-class.stanza",
                    "patterns": [
                        {
                            "match": "&",
                            "name": "keyword.operator.intersection.stanza"
                        }
                    ]
                }
            ]
        },
		{
            "match": "(?x) (defn|defmethod|defmulti)\\*?\\s+ ([^ \"'\t0-9~!@#$%^*+-=/.:&|<>][^ \t,.:&|<>\\[\\]{}()]*) (\\s+|\\<)",
            "name": "meta.declaration.function.stanza",
            "captures": {
                "1": { "name": "storage.type.function.stanza" },
                "2": { "name": "entity.name.function.stanza" },
                "3": { "name": "keyword.operator.parameter.stanza" }
            }
        },
		{
            "begin": "{",
            "end": "}",
            "captures": {
                "0": { "name": "keyword.other.function.anon.stanza" }
            },
            "patterns": [
                {
                    "match": "(?<!\\w)_(?!\\w)",
                    "name": "variable.language.stanza"
                },
                { "include": "$self" }
            ]
        },
        {
            "match": "(?<!\\w)-?[0-9][^ \t,.:&|<>\\[\\]{}()]*",
            "name": "constant.numeric.stanza"
        },
        {
            "begin": "\"",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.stanza" }
            },
            "end": "\"",
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.stanza" }
            },
            "name": "string.quoted.double.stanza",
            "patterns": [
                {
                    "match": "(?<!\\\\)%[_*,~@%]",
                    "name": "keyword.other.interpolation.stanza"
                }
            ]
        },
        {
            "match": "'(?:\\\\.|.)(.*?)'",
            "name": "string.quoted.single.char.stanza",
            "captures": {
                "1": {
                    "name": "invalid.illegal.char.stanza"
                }
            }
        },
        {
            "begin": "label(?=[ <])",
            "beginCaptures": {
                "0": {
                    "name": "storage.type.scope.stanza"
                }
            },
            "end": ":",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.colon.stanza"
                }
            },
            "name": "meta.scope.label.stanza",
            "patterns": [
                {
                    "begin": "<",
                    "end": ">",
                    "name": "meta.scope.type.stanza",
                    "patterns": [
                        { "include": "#types" }
                    ]
                },
                {
                    "match": "[^ \"'\t0-9~!@#$%^*+-=/.:&|<>][^ \t,.:&|<>\\[\\]{}()]*",
                    "name": "entity.name.section.scope.stanza"
                }
            ]
        },
        {
            "match": "(?x)(?<!\\-)\\b( to-(?:char|seq|string|array|tuple|list|symbol|byte|int|long|float|double) )(?=\\(|\\{|\\s+\\$)",
            "name": "support.function.any-method.conversion.stanza"
        },
		{
            "match": "(?x)(?<!\\-)\\b( (?:not-)?equal\\?|compare| less(?:-eq)?\\?|greater(?:-eq)?\\?| max(?:imum)?|min(?:imum)?|hash|length|empty\\?|next|peek| get\\??|set|map!?|reverse!|in-reverse| print(?:ln)?(?:-all)?| (?:with|current)-output-stream|get-(?:char|byte)| (?:do-)indented|put|close|with-output-file|spit| write(?:-all)?|close|slurp|peek\\?|info| bits(?:-as-(?:float|double))?|rand|fill(?:-template)?| (?:ceil|floor)-log2|(?:next|prev)-pow2|sum|product| complement|digit\\?|letter\\?|(?:upper|lower)-case\\??| start|end|step|inclusive\\?| matches\\?|prefix\\?|suffix\\?|append(?:-all)?| string-join|(?:last-)?index-of-chars?|replace|trim| add(?:-all)?|clear|(?:get|set)-chars| cons|headn?|tailn?|(?:in-)?reverse| (?:but-)?last|transpose|seq-append|filename|line|column| item|unwrap-(?:token|all)|key(?:\\?|s)?|value(?:\\?|!|s)?| symbol-join|gensym|name|id|qualified\\?|qualifier| throw|with-(?:exception-handler|finally)|try-catch-finally| fatal|fail|with-attempt|attempt-else|generate| resume|suspend|break|close|active\\?|open\\?| dynamic-wind|find!?|first!?|seq\\??|filter| index-when!?|split|take-(?:while|until)|seq-cat| all\\?|none\\?|any\\?|count|repeat(?:-while)?|repeatedly| take(?:-up-to)?-n|cat(?:-all)?|join|zip(?:-all)?| contains\\?|index-of!?|reduce(?:-right)?|unique| lookup\\??|parallel-seq|qsort!|lazy-qsort|marker!?| add-gc-notifier|command-line-arguments|file-exists\\?| delete-file|resolve-path|current-time-(?:ms|us)| (?:get|set)-env|call-system|stop|time| exp|log(?:10)?|pow|sin|cos|tan|asin|acos|atan|atan2| sinh|cosh|tanh|ceil|floor|round|to-(?:radians|degrees)| pop|peek|remove(?:-item|when)?|update|shorten| lengthen|default\\?|read(?:-file|-all)?|tagged-list\\?| )(?=\\(|\\{|\\s+\\$)",
            "name": "support.function.core.stanza"
        },
        {
            "begin": "(?x) ^(\\s*)(?:(public|protected)\\s+)? (lostanza|extern)(?![\\w\\-])(?=.*(?:=|:)$)",
            "beginCaptures": {
                "2": {
                    "name": "storage.modifier.privacy.stanza"
                },
                "3": {
                    "name": "storage.type.lostanza.stanza"
                }
            },
            "end": "^(?!\\1\\s+|\\n)",
            "name": "meta.lostanza.function.stanza",
            "patterns": [
                { "include": "#lostanza" },
                { "include": "$self" }
            ]
        },
        {
            "match": "(lostanza)\\s+(deftype)\\s+(\\S+)\\s+",
            "captures": {
                "1": { "name": "support.function.lostanza.stanza" },
                "2": { "name": "storage.type.type.lostanza.stanza" },
                "3": { "name": "entity.name.type.lostanza.stanza" }
            },
            "name": "meta.lostanza.type.stanza"
        },
        {
            "begin": "(?x)(lostanza)\\s+(?: (val|var)\\s+\\S+\\s*:| (defn)\\s+(\\S+)\\s+\\()",
            "beginCaptures": {
                "1": { "name": "support.function.lostanza.stanza" },
                "2": { "name": "storage.type.variable.lostanza.stanza" },
                "3": { "name": "storage.type.function.lostanza.stanza" },
                "4": { "name": "entity.name.function.lostanza.stanza" }
            },
            "end": "$",
            "name": "meta.lostanza.variable.stanza",
            "patterns": [
                { "include": "#lostanza" },
                { "include": "$self" }
            ]
        },
        {
            "begin": "\\s*(extern)\\s+(\\S+)\\s*(:)",
            "beginCaptures": {
                "1": { "name": "storage.type.external.lostanza.stanza" },
                "2": { "name": "entity.other.external.lostanza.stanza" },
                "3": { "name": "keyword.operator.stanza" }
            },
            "end": "$",
            "name": "meta.lostanza.external.stanza",
            "patterns": [
                { "include": "#lostanza" },
                { "include": "$self" }
            ]
        },
        { "include": "#types" },
        {
            "match": "(?<!\\w|\\-)(?:val|import|with)(?!\\w|\\-)",
            "name": "storage.type.lostanza.stanza"
        },
        {
            "match": "(?x)(?<!\\w|\\-|\\$)(?: var|defpackage|deftype|defstruct|defn\\*?| defmulti|defmethod\\*?|defproduction|defsyntax|defrule )(?!\\w|\\-)",
            "name": "storage.type.$0.stanza"
        },
        {
            "match": "(?<!\\w|\\-)(public|protected)(?!\\w|\\-)",
            "name": "storage.modifier.stanza"
        },
        {
            "match": "(?x)(?<!\\w|\\-)(?: if|else|when|switch|match|let|let-var| where|for|while|label|yield|try|catch| finally|throw|attempt|fn\\*?| multifn\\*?|qquote|do )(?!\\w|\\-)",
            "name": "keyword.control.stanza"
        },
        {
            "match": "(?x)(?<!\\w|\\-)(?: to|through|by|in|and|or|not|as\\??|is|seq )(?!\\w|\\-)",
            "name": "keyword.operator.stanza"
        },
        {
            "match": "(?<!\\w|\\-)(true|false)(?!\\w|\\-)",
            "name": "constant.language.stanza"
        },
        {
            "match": "[~!@#$%^*+\\-=/.:&|<>]+(?:[ \t]|$)",
            "name": "keyword.operator.stanza"
        },
        {	"contentName": "constant.language.s-expression.stanza",
            "begin": "`\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.s-exp.list.stanza"
                }
            },
            "end": "\\)",
            "patterns": [
                {
                    "begin": "\\(",
                    "end": "\\)"
                }
            ]
        },
        {
            "begin": "(\\\\<)(.+?)(>)",
            "beginCaptures": {
                "1": { "name": "punctuation.definition.here.tag.stanza" },
                "2": { "name": "entity.name.tag.here.stanza" },
                "3": { "name": "punctuation.definition.here.tag.stanza" }
            },
            "end": "(<)(\\2)(>)",
            "endCaptures": {
                "1": { "name": "punctuation.definition.here.tag.stanza" },
                "2": { "name": "entity.name.tag.here.stanza" },
                "3": { "name": "punctuation.definition.here.tag.stanza" }
            },
            "contentName": "string.unquoted.here.stanza"
        },
        {
            "begin": "`",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.s-exp.stanza"
                }
            },
            "end": "(?=[\\s)}\\]])",
            "name": "constant.language.s-exp.stanza",
            "patterns": [
                {
                    "begin": "\\(",
                    "end": "\\)"
                },
                {
                    "begin": "\\{",
                    "end": "\\}"
                }
            ]
        },
        {
            "begin": "(?<=\\s|\\()\\[",
            "end": "\\]",
            "captures": {
                "0": {
                    "name": "punctuation.section.embedded.deref.stanza"
                }
            },
            "patterns": [
                {
                    "begin": "(?<=\\S)\\[",
                    "end": "\\]",
                    "patterns": [
                        { "include": "$self" }
                    ]
                },
                { "include": "$self" }
            ]
        },
        {	"name": "meta.type.instance.stanza",
            "begin": "(?x) (\\s*)(?:(val|var)\\s+.+\\s+(=)\\s+)? (new)\\s+([A-Z][A-Za-z0-9_]*)(?=.*:$)",
            "beginCaptures": {
                "2": {
                    "name": "storage.type.stanza"
                },
                "3": {
                    "name": "keyword.operator.stanza"
                },
                "4": {
                    "name": "storage.type.stanza"
                },
                "5": {
                    "name": "support.type.stanza"
                }
            },
            "end": "^(?!\\1\\s+|\\n)",
            "patterns": [
                {
                    "match": "\\bthis\\b",
                    "name": "variable.language.instance.stanza"
                },
                { "include": "$self" }
            ]
        }
    ],
    "repository": {
        "lostanza": {
            "patterns": [
                {
                    "match": "(?<!\\w|\\-)(?:return|call-c|value|new)(?!\\w|\\-|\\:)",
                    "name": "keyword.other.special-method.lostanza.stanza"
                },
                {
                    "begin": "(ptr|ref)(\\<)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.lostanza.stanza"
                        },
                        "2": {
                            "name": "punctuation.section.stanza"
                        }
                    },
                    "end": "(?<!\\-)\\>",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.stanza"
                        }
                    },
                    "name": "meta.type.lostanza.stanza",
                    "patterns": [
                        { "include": "#lostanza" },
                        { "include": "#types" }
                    ]
                },
                {
                    "match": "\\baddr!?(?=\\(|\\{)",
                    "name": "support.function.lostanza.stanza"
                },
                {
                    "match": "(?<!\\w|\\-)(byte|int|long|float|double)(?!\\w|\\-)",
                    "name": "support.type.lostanza.stanza"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "match": "(?<!\\w)\\?",
                    "name": "keyword.other.unit.unknown.stanza"
                },
                {
                    "begin": "(?<!\\w)([A-Z][A-Za-z0-9_-]*)(?![(:\\-]|\\w)(<)",
                    "captures": {
                        "1": {
                            "name": "support.type.parameterized.stanza"
                        },
                        "2": {
                            "name": "punctuation.section.type.parameter.begin.stanza"
                        }
                    },
                    "end": "(?!\\-)>",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.type.parameter.end.stanza"
                        }
                    },
                    "name": "meta.type.parameterized.stanza",
                    "patterns": [
                        { "include": "#types" }
                    ]
                },
                {
                    "match": "(?<!\\w)([A-Z][A-Za-z0-9_-]*)(?![(:\\-]|\\w)",
                    "name": "support.type.stanza"
                }
            ]
        }
    }
}